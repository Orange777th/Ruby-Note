12 Ruby 繰り返し処理
学習日時：2020年12月8日


each
　eachは配列の要素を最初から最後まで順番に取り出しながら処理を実行します

　構文

　　配列やハッシュ名.each do |変数名|
　　　#繰り返し実行したい処理
　　end

　　※配列やハッシュ名は複数形、変数名は単数形で書くことが多いです

　　例）1から5までの数字が順番に入った配列numbersを一つずつ取り出して出力するプログラム
　　　numbers = [1,2,3,4,5]
　　　　numbers.each do |number|
　　　　puts number
　　　end

　　　出力結果
　　　1
　　　2
　　　3
　　　4
　　　5

　　※以下のような文に書き換えることもできます
　　　numbers.each {|number|
　　　　puts number
　　　}

　　　numbers.each  {|number| puts number}


　ハッシュを利用したeach
　　例）生徒ごとの点数が入ったハッシュscoresを一つずつ取り出して出力するプログラム
　　　scores = {ken: 100, Kumi: 90, Ami:70}
　　　scores.each do |st, sc|
　　　　puts sc
　　　end

　　　出力結果
　　　100
　　　90
　　　70

　　　例）キーと値も出力させる方法
　　　　scores = {ken: 100, Kumi: 90, Ami:70}
　　　　scores.each do |st, sc|
　　　　　puts “#{st}, #{sc}”
　　　　end

　　　　出力結果
　　　　Ken, 100
　　　　Kumi, 90
　　　　Ami, 70


for

　構文
　　for 変数名 in 配列やハッシュ名 do
　　　#繰り返したい処理
　　end

　　例）1から5までの数字が順番に入った配列numbersを一つずつ取り出して出力するプログラム
　　　for number in numbers do
　　　　puts
　　　end

　　　出力結果
　　　1
　　　2
　　　3
　　　4　
　　　5

　　　※forは原則使用しません　←重量です
　　　　eachでもforでも書ける場合、eachを使用します



times
 　配列を使用せずに単純に指定した回数分処理を繰り返したいときに使用します

　構文
　　繰り返し回数.times do |i|
　　　#繰り返し実行したい処理
　　end

　※|i|は省略することができ、変数名は自由につけることができます

　例）5回’Hello’と出力するプログラム
　　5.times do
　　　puts ‘Hello’
　　end

　　出力結果
　　Hello
　　Hello
　　Hello
　　Hello
　　Hello

　例）|i|を使用した場合
　　5.times do |i|
　　　puts “#{i}: Hello”
　　end

　　出力結果
　　0: Hello
　　1:  Hello
　　2: Hello
　　3: Hello
　　4: Hello

　※以下の文に書き換えることもできます
　　5.times { |i|
　　　puts “#{i}: Hello”
　　}

　　出力結果
　　0: Hello
　　1:  Hello
　　2: Hello
　　3: Hello
　　4: Hello



while
　構文
　　while 条件式 do
　　　#繰り返し実行したい処理
　　end 

　例）数字を0から9まで10個の数字を出力するプログラム
　　i = 0
　　while i < 10 do
　　　puts i
　　　i += 1
　　end

　　出力結果
　　0
　　1
　　2
　　3
　　4
　　5
　　6
　　7
　　8
　　9

　※「i +=1」で変数iの数値に1を足しています
　　これがないと永遠にiは0になってしまいプログラムが無限に「0」が出力されフリーズしてしまいます。フリーズした場合は「command」 + 「C」で処理を強制終了させます



upto
　nからmまで数値を1ずつ増やしながら特定の処理を実行したいときに使用します

　構文
　　開始値.upto(終了値){繰り返し実行したい処理}

　　例）数値を21から25まで1ずつ増やしながら値を出力するプログラム
　　　21.upto(25) { |n| puts n}

　　　出力結果
　　　21
　　　22
　　　23
　　　24
　　　25

downto
　nからmまで数値を1ずつ減らしながら特定の処理を実行したいときに使用します

　構文
　　開始値.downto(終了値) {繰り返し実行したい処理}

　　例）数値を25から21まで1ずつ減らしながら値を出力するプログラム
　　　25.downto(21) { |n| puts n}

　　　出力結果
　　　25
　　　24
　　　23
　　　22
　　　21


Step
　nからmまでxずつ値を増やしながら特定の処理を実行したいときに使用します

構文
　開始式.step(上限値, 一度に増減する大きさ) {}

　例）数値を0から50まで5ずつ増やしながら出力するプログラム
　　0.step(50, 5){ |n| puts n}

　　出力結果
　　0
　　5
　　10
　　15
　　20
　　25
　　30
　　35
　　40
　　45
　　50

　例）数値を50から0まで5ずつ減らしながら出力するプログラム
　　50.step(0, -5){ |n| puts n}

　　出力結果
　　50
　　45
　　40
　　35
　　30
　　25
　　20
　　15
　　10
　　5
　　0


loop,break,next
　無限ループ作りたいときに利用します
「command」 + 「C」で処理を矯正終了させます

　構文
　　loop do
　　　#繰り返し実行したい処理
　　end

　　例）iを出力してから1を加えることを無限にループさせるプログラム
　　　i = 0
　　　Loop do
　　　　puts i
　　　　i += 1
　　　end

　　
　　※whileで書き換えることもできます
　　i= 0
　　while true
　　　puts i
　　　i += 1
　　end

　　例）loopとbreakを使用した0から9まで出力するプログラム
　　　i = 0
　　　Loop do
　　　　puts i
　　　　i += 1
　　　　break if i == 10
　　　end

　　　出力結果
　　　1
　　　2
　　　3
　　　4
　　　5
　　　6
　　　7
　　　8
　　　9

　　※iが10になったときにループを終了します
　　

　　例）配列[1,2,3,4,5]の値が奇数の場合のみ画面に出力させるプログラム
　　　numbers = [1,2,3,4,5]
　　　numbers.each do |n|
　　　　next if n % 2 == 0
　　　　puts n
　　　end

　　　出力結果
　　　1
　　　3
　　　5

　　※nextは条件を満たしていると次以降の処理を飛ばして次のループに進めさせることができます
　　　「next if n % 2 == 0」は「next if n.even?」に書き換えることができます
　　　　また、奇数の場合は「next if n.odd?」と書きます

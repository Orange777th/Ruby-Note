05 リテラル・文字列


　リテラル
　　Rubyのプログラムの中に直接記述できる値のことをリテラルといいます

　　例）
　　　数値：123
　　　文字列：’Hello, Slime’
　　　配列： [1,2,3]
　　　連想配列：[‘red’ => ‘赤 , ‘green’ => ’緑’ , ‘blue’ => ‘青] 
　　　正規表現：/\d+-\d+/




動的型付け
　変数に値を代入するときに、動的型付けがされる
　変数の型指定を変数の宣言時に行う必要はありません

　　例）x = 5

　　3/2 =>1
　　3.0/2 => 1.5
　　3/2.0 => 1.5
　　10 % 3 => 1
　　10 ** 3 => 1000
　　x = 3 => 3




数字を小数点に変換する方法
　片方についていれば小数点に変換することができます
　x.to_f　=>  3.0

　X.to_f / 2 => 1.5
　X /2 =>1

※少数を扱う場合は丸め誤差に注意してください
　例）丸め誤差が発生すると例の場合、偽が返ってきます
 　　0.5 * 3.0 == 1.5
  　　=>false
 　　0.5 * 3.0 <= 1.5
  　　=>false 

　これらを防ぐためRational（クラス）を使用します
　使用するときは数字の語尾にrを付けます

　例）
 　　0.5r * 3.0r
 　　　=>3/10
    
    0.5 * 3.0 == 1.5
  　　=>true
    
 　　0.5 * 3.0 <= 1.5
  　　=>true



数値オブジェクトのクラスを確認する方法
　2.class => Integer
　2.5.class => Float
　2.5.methods



文字列
　特殊文字や式展開を使用するときにダブルクオート「””」、
　それ以外のときにシングルクォート「’’」ｗｐ使用します

　　例）
　　‘abcdef’
　　“abcdef”

特殊記号を使う場合
　　puts ’Ruby\on Rails’
 　　=> Ruby\on Rails

　　first_name = ‘Oren’
　　last_name = ‘Mikan’

　例）式展開を使用する場合
　式展開を使うと変数や式の結果を文字列の中に埋めることができます
　#{変数や式の結果}

　　puts “My name is #{first_name}  #{last_name}.”
 　　My name is Oren Mikan
　　　=>nil

　　puts ‘My name is #{first_name}  #{last_name}.’
 　　My name is #{first_name}  #{last_name}
　　　=>nil


※シングルクォートを使うと式展開されず#{}はそのまま文字列として表示されます
※nilとは「何も存在しない」という意味を持ちます

   「\n」をダブルクオートで囲むと改行することができます
    例）
　    puts “おはようございます\n本日もよろしくおねがいします！”
     　=> おはようございます
  　　    本日もよろしくおねがいします

    例）シングルクォートで囲むと\nはただの文字列になります
    　puts “おはようございます\n本日もよろしくおねがいします！”
    　 => おはようございます\n本日もよろしくおねがいします



文字列を連結させる方法

　puts ‘Oren’ + ‘Mikan’
　OrenMikan
 　=> nil

文字列の間に空白を入れたいとき
　puts ‘Oren’ + ’ ‘ ＋Mikan’
　Oren Mikan
 　=> nil

文字列のすべて大文字にする
　x = ‘Hello, Slime!’
　puts  s.upcase
　HELLO, SLIME!
　　=>nil

　puts  s
　HELLO, SLIME!
　Hello, Slime!’
　　=>nil

　※upcaseは宣言したときだけ文字列を大文字にするため
　変数自体の文字は大文字になりません



変数自体の文字を大文字にしたいとき

　x = ‘Hello, Slime!’
　s.upcase!

　puts s
　HELLO, SLIME!
　=>nil




空白文字
　コード入力時に空白を使用することができ、いくら空白を追加しても処理の結果は変わりません
　コードを見やすくするために空白（スペース）を1つ開けて書きます

　　例）
　　○
　　10 + 2  - 3
　　=>9

　　✗
　　10                      +  2 -      3
　　=>9     
